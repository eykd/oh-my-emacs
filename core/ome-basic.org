#+TITLE: Oh My Emacs Basic
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[https://github.com/xiaohanyu/oh-my-emacs][oh-my-emacs]].

* Prerequisites
  :PROPERTIES:
  :CUSTOM_ID: basic-prerequisites
  :END:

#+NAME: basic-prerequisites
#+CAPTION: Prerequisites for ome-basic module
|            | Windows | Ubuntu/Debian/Mint | ArchLinux | Fedora | Mac OS X | Mandatory? |
|------------+---------+--------------------+-----------+--------+----------+------------|
| [[http://aspell.net/][GNU Aspell]] |         | aspell, aspell-en  |           |        |          |            |

* El-get Packages
  :PROPERTIES:
  :CUSTOM_ID: basic-el-get-packages
  :END:

#+NAME: basic-el-get-packages
#+CAPTION: el-get packages for ome-basic module
|                | Status      | Description                                       |
|----------------+-------------+---------------------------------------------------|
| saveplace      | Builtin     | Save cursor place in opened files.                |
| recentf        | Builtin     | Maintains a recent opened file list.              |
| uniquify       | Builtin     | Better differentiate buffers with same file name. |
| auto-fill-mode | Builtin     | We should still obey the 80-characters rule.      |
| [[https://github.com/flycheck/flycheck][Flycheck]]       | Recommended | aka "Flymake done right"                           |

* Some Basic Settings
  :PROPERTIES:
  :CUSTOM_ID: basic
  :END:

#+NAME: basic
#+BEGIN_SRC emacs-lisp
  ;; fix the mac PATH variable
  (defun ome-set-exec-path-from-shell-PATH ()
    (let ((path-from-shell (shell-command-to-string "$SHELL -i -c 'echo $PATH'")))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))

  (when (eq system-type 'darwin)
    (when window-system (ome-set-exec-path-from-shell-PATH)))

  ;; set environment coding system
  (set-language-environment "UTF-8")
  ;; set TAB and indention
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
  ;; y or n is suffice for a yes or no question
  (fset 'yes-or-no-p 'y-or-n-p)
  ;; always add new line to the end of a file
  (setq require-final-newline t)
  ;; add no new lines when "arrow-down key" at the end of a buffer
  (setq next-line-add-newlines nil)
  ;; prevent the annoying beep on errors
  (setq ring-bell-function 'ignore)
  ;; enable to support navigate in camelCase words
  (global-subword-mode t)
  ;; hide startup splash screen
  (setq inhibit-startup-screen t)

  ;; shell-mode settings
  (unless (eq system-type 'windows-nt)
    (setq explicit-shell-file-name "/bin/bash")
    (setq shell-file-name "/bin/bash"))
  ;; always insert at the bottom
  (setq comint-scroll-to-bottom-on-input t)
  ;; no duplicates in command history
  (setq comint-input-ignoredups t)
  ;; what to run when i press enter on a line above the current prompt
  (setq comint-get-old-input (lambda () ""))
  ;; max shell history size
  (setq comint-input-ring-size 1000)
  ;; show all in emacs interactive output
  (setenv "PAGER" "cat")
  ;; set lang to enable Chinese display in shell-mode
  (setenv "LANG" "en_US.UTF-8")

  ;; set text-mode as the default major mode, instead of fundamental-mode
  ;; The first of the two lines in parentheses tells Emacs to turn on Text mode
  ;; when you find a file, unless that file should go into some other mode, such
  ;; as C mode.
  (setq-default major-mode 'text-mode)

  ;;; ido-mode
  (setq ido-enable-prefix nil)
  (setq ido-enable-case nil)
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode t)

  ;; use icomplete in minibuffer
  (icomplete-mode t)

  ;; delete the selection with a keypress
  (delete-selection-mode t)
#+END_SRC

* Mac OS X compatibilities
  :PROPERTIES:
  :CUSTOM_ID: mac
  :END:

There're multiple [[http://wikemacs.org/index.php/Installing_Emacs_on_OS_X][choices]] to install Emacs on Mac OS X. I prefer [[http://brew.sh/][Homebrew]], and
got my Emacs with =brew install emacs --cocoa=. This version of emacs even has
native [[http://batsov.com/articles/2012/12/09/emacs-24-dot-3-introduces-native-osx-full-screen-support/][full screen support]].

* Auto-fill Mode
  :PROPERTIES:
  :CUSTOM_ID: auto-fill
  :END:

[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Fill.html][Auto Fill mode]] is a buffer-local minor mode in which lines are broken
automatically when they become too wide. Breaking happens only when you type a
<SPC> or <RET>.

You may wonder why we still live with 80 columns rule in modern life, in which
we have large monitors, intelligent editors(or IDEs). I don't explain the
reasons here, you can refer stackoverflow [[http://stackoverflow.com/questions/110928/is-there-a-valid-reason-for-enforcing-a-maximum-width-of-80-characters-in-a-code][1]] and [[http://stackoverflow.com/questions/373561/do-people-still-live-by-the-80-column-rule][2]] to get some feeling.

I zealously wrap my code at 80 columns if possible, and encourage my colleagues
to follow the same rule. In fact, there're some projects in which 80 columns
rule is mandatory.

I enable auto fill minor mode for text-mode and prog-mode and all [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Derived-Modes.html][derived modes]]
from them[1]. For how to quickly fill a paragraph or region, see [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Fill-Commands.html][Explicit Fill
Commands]].

#+NAME: auto-fill
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 79)
  ;; (add-hook 'text-mode-hook 'turn-on-auto-fill)
  ;; (add-hook 'prog-mode-hook 'turn-on-auto-fill)
#+END_SRC

* Save Place in Opened Files
  :PROPERTIES:
  :CUSTOM_ID: saveplace
  :END:

When you visit a file, point goes to the last place where it was when you
previously visited the same file. The following code comes from [[http://emacs-fu.blogspot.com/2009/05/remembering-your-position-in-file.html][emacs-fu]].

#+NAME: saveplace
#+BEGIN_SRC emacs-lisp
  (setq-default save-place t)
  (setq save-place-file (concat user-emacs-directory ".saved-places"))
  (require 'saveplace)
#+END_SRC

* Recentf
  :PROPERTIES:
  :CUSTOM_ID: recentf
  :END:

All modern editors(or IDEs) provide features like open recent files/projects,
so does emacs -- =recentf=, a builtin emacs package which maintains a menu for
visiting files that were operated on recently. Together with =savespace=,
emacs provides a quick way to restore your workspace.

The following code comes from [[http://www.masteringemacs.org/articles/2011/01/27/find-files-faster-recent-files-package/][masteringemacs]], which combined =ido= and
=recentf=.

#+NAME: recentf
#+BEGIN_SRC emacs-lisp
  (require 'recentf)

  ;; get rid of `find-file-read-only' and replace it with something
  ;; more useful.
  (global-set-key (kbd "C-x C-r") 'ido-recentf-open)

  ;; save the .recentf file to .emacs.d/
  (setq recentf-save-file (concat user-emacs-directory ".recentf"))

  ;; enable recent files mode.
  (recentf-mode t)

  ;; 50 files ought to be enough.
  (setq recentf-max-saved-items 50)

  (defun ido-recentf-open ()
    "Use `ido-completing-read' to \\[find-file] a recent file"
    (interactive)
    (if (find-file (ido-completing-read "Find recent file: " recentf-list))
        (message "Opening file...")
      (message "Aborting")))
#+END_SRC

* Uniquify
  :PROPERTIES:
  :CUSTOM_ID: uniquify
  :END:

Sometimes when you view different files with same filenames, emacs will
append "<1>", "<2>" to the filename as the buffer name to differentiate
them. Maybe you do not like the default naming patterns to "uniquify" these
buffers, so emacs provides a uniquify package which can change the default
naming of buffers to include parts of the file name (directory names) until the
buffer names are unique.

You can type =C-h i m emacs RET s uniquify RET= to get the manual about
uniquify package. Or you can refer to [[http://trey-jackson.blogspot.com/2008/01/emacs-tip-11-uniquify.html][1]] and [[http://emacs-fu.blogspot.com/2009/11/making-buffer-names-unique.html][2]].

#+NAME: uniquify
#+BEGIN_SRC emacs-lisp
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
(require 'uniquify)
#+END_SRC

* Flyspell
  :PROPERTIES:
  :CUSTOM_ID: flyspell
  :END:

Emacs has builtin support for [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html][spelling checking and correcting]] -- =flyspell=,
but it is nonsense to enable it by default since most programming mode has
special keyword which is not always spelled correctly by the judgement of the
spelling checker.

In order to use =flyspell=, you must install an external spell checker, such as
[[http://aspell.net/][Aspell]] or [[http://www.gnu.org/software/ispell/][Ispell]], but GNU recommends [[http://aspell.net/man-html/Using-Aspell-as-a-Replacement-for-Ispell.html][Using Aspell as a Replacement for
Ispell]]. The following code snippets comes from [[https://github.com/bbatsov/prelude/blob/master/core/prelude-editor.el][emacs prelude]].

#+NAME: flyspell
#+BEGIN_SRC emacs-lisp
  ;; use aspell instead of ispell
  (setq ispell-program-name "aspell"
        ispell-extra-args '("--sug-mode=ultra"))
#+END_SRC

* Flycheck
  :PROPERTIES:
  :CUSTOM_ID: flycheck
  :END:

[[https://github.com/flycheck/flycheck][Flycheck]] (aka “Flymake done right”) is a modern on-the-fly syntax checking
extension for GNU Emacs 24.

#+NAME: flycheck
#+BEGIN_SRC emacs-lisp
  (defun ome-flycheck-setup ()
    (eval-after-load 'flycheck
      '(setq flycheck-checkers (delq 'emacs-lisp-checkdoc flycheck-checkers)))
    (add-hook 'prog-mode-hook 'flycheck-mode)
    (add-hook 'python-mode-hook 'flycheck-mode)
    (add-hook 'after-init-hook 'global-flycheck-mode))

  (ome-install 'flycheck)
#+END_SRC

* Scratch Buffer

Create scratch buffers that are in the same mode as the current buffer:

#+BEGIN_SRC emacs-lisp
  (ome-install 'scratch)
#+END_SRC

If the *scratch* buffer is killed, recreate it automatically

FROM: Morten Welind
http://www.geocrawler.com/archives/3/338/1994/6/0/1877802/
Via http://www.emacswiki.org/emacs/RecreateScratchBuffer

#+BEGIN_SRC emacs-lisp
  (save-excursion
    (set-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode)
    (make-local-variable 'kill-buffer-query-functions)
    (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer))

  (defun kill-scratch-buffer ()
    ;; The next line is just in case someone calls this manually
    (set-buffer (get-buffer-create "*scratch*"))
    ;; Kill the current (*scratch*) buffer
    (remove-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
    (kill-buffer (current-buffer))
    ;; Make a brand new *scratch* buffer
    (set-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode)
    (make-local-variable 'kill-buffer-query-functions)
    (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
    ;; Since we killed it, don't let caller do that.
    nil)
#+END_SRC

* Fill-Column-Indicator
  :PROPERTIES:
  :CUSTOM_ID: fill-column-indicator
  :END:

"Many modern editors and IDEs can graphically indicate the location of the fill
column by drawing a thin line (in design parlance, a "rule") down the length of
the editing window. Fill-column-indicator implements this facility in Emacs
[[https://github.com/alpaker/Fill-Column-Indicator][Fill-Column-Indicator]]."

This package still has some conflicts with other oh-my-emacs packages, so I
put it in ome-experimental module instead of core.

#+NAME: fill-column-indicator
#+BEGIN_SRC emacs-lisp :tangle no
    (defun ome-fill-column-indicator-setup ()
      (setq fci-rule-width 1)
      (setq fci-rule-color "darkblue")
      (setq fci-rule-column 80)
      (add-hook 'text-mode-hook 'turn-on-fci-mode)
      (add-hook 'prog-mode-hook 'turn-on-fci-mode)
      (define-globalized-minor-mode global-fci-mode fci-mode turn-on-fci-mode)
      (global-fci-mode 1))
  (ome-install 'fill-column-indicator)
#+END_SRC

* Whitespace
  :PROPERTIES:
  :CUSTOM_ID: whitespace
  :END:

We want to highlight certain kinds of whitespace as a visual indicator that
something is wrong. Tabs, overly-long lines, that sort of thing. Make ugliness
extra ugly!

#+NAME: whitespace
#+BEGIN_SRC emacs-lisp
  (require 'whitespace)

  '(whitespace-line ((t (:foreground "dark gray" :underline t))))

  (setq whitespace-style '(face empty tabs lines-tail))
  (setq whitespace-line-column 90)
  (add-hook 'python-mode-hook 'whitespace-mode)

  ;; (defadvice color-theme-install (after my-color-theme-install-after activate)
  ;;   "Fix trailing-whitespace after color theme destroys it"
  ;;   (set-face-attribute 'trailing-whitespace nil
  ;;                       :foreground 'unspecified
  ;;                       :inverse-video 'unspecified
  ;;                       :slant 'unspecified
  ;;                       :weight 'unspecified
  ;;                       :background "#fff"))


#+END_SRC

* Ethan Whitespace Mode
  :PROPERTIES:
  :CUSTOM_ID: fill-column-indicator
  :END:

Presenting, with tongue firmly in cheek: ethan-wspace, the definitive emacs customizations for people who are OCD about whitespace.

#+NAME: ethan-wspace mode  :tangle no
#+BEGIN_SRC emacs-lisp
  (defun ome-ethan-wspace-setup ()
    (setq global-ethan-wspace-mode 1))

  (ome-install 'ethan-wspace)
#+END_SRC

* ws-butler

ws-butler is installed in src/ since it's not in ELPA.

#+NAME: ws-butler
#+BEGIN_SRC emacs-lisp
  (require 'ws-butler)
  (ws-butler-global-mode)

#+END_SRC

* Todo
** Flycheck
- Customizable prefix key, see https://github.com/flycheck/flycheck/issues/223.
- Checkers for Common Lisp.
- Test with big files for performance.
- More documentation and tutorial.

* Footnotes
[1] Actually, emacs has only three [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Major-Modes.html][basic major modes]], so we actually enable
auto-fill in almost every programming and writing modes.
